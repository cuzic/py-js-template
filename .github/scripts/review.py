#!/usr/bin/env python3
"""
AI Code Review Script using Google Gemini API

This script performs automated code review on pull request diffs using 
Google's Gemini AI model. It analyzes the code changes and provides 
detailed feedback on code quality, potential issues, and improvements.

Requirements:
    - GEMINI_API_KEY environment variable
    - requests library (pip install requests)

Usage:
    python review.py <pr_diff_file> [options]
    
Environment Variables:
    GEMINI_API_KEY: Google Gemini API key (required)
    GITHUB_TOKEN: GitHub token for API access (optional)
    PR_NUMBER: Pull request number (optional)
    REPO_NAME: Repository name (optional)
"""

import os
import sys
import json
import argparse
from typing import Optional, Dict, Any
import logging

try:
    import requests
except ImportError:
    print("Error: requests library is required. Install with: pip install requests")
    sys.exit(1)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GeminiReviewer:
    """AI Code Reviewer using Google Gemini API"""
    
    def __init__(self, api_key: str):
        """Initialize the reviewer with API key"""
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
        
    def create_review_prompt(self, diff_content: str) -> str:
        """Create a comprehensive review prompt for the AI"""
        return f"""
# ü§ñ AI Code Review

„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„Ç∑„Éã„Ç¢„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÈñãÁô∫ËÄÖ„Å®„Åó„Å¶„ÄÅ‰ª•‰∏ã„ÅÆPull Request„ÅÆÂ∑ÆÂàÜ„Çí„É¨„Éì„É•„Éº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

## „É¨„Éì„É•„Éº„Ç¨„Ç§„Éâ„É©„Ç§„É≥

### üîç **ÈáçÁÇπ„ÉÅ„Çß„ÉÉ„ÇØÈ†ÖÁõÆ**
1. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£**: ËÑÜÂº±ÊÄß„ÄÅÊ©üÂØÜÊÉÖÂ†±„ÅÆÈú≤Âá∫„ÄÅÂÖ•ÂäõÊ§úË®º
2. **„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ**: „Ç¢„É´„Ç¥„É™„Ç∫„É†„ÅÆÂäπÁéáÊÄß„ÄÅ„É°„É¢„É™‰ΩøÁî®Èáè„ÄÅ„Éá„Éº„Çø„Éô„Éº„Çπ„ÇØ„Ç®„É™
3. **ÂìÅË≥™**: „Ç≥„Éº„Éâ„ÅÆÂèØË™≠ÊÄß„ÄÅ‰øùÂÆàÊÄß„ÄÅ„ÉÜ„Çπ„ÉàÂèØËÉΩÊÄß
4. **„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ**: Ë®ÄË™ûÂõ∫Êúâ„ÅÆÊÖ£‰æã„ÄÅË®≠Ë®à„Éë„Çø„Éº„É≥
5. **„Éê„Ç∞**: Ë´ñÁêÜ„Ç®„É©„Éº„ÄÅ„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„ÄÅÂûãÂÆâÂÖ®ÊÄß

### üìù **„É¨„Éì„É•„ÉºÂΩ¢Âºè**
- **ÈáçË¶ÅÂ∫¶**: üî¥ Critical / üü° Warning / ‚ÑπÔ∏è Suggestion
- **ÂÖ∑‰ΩìÁöÑ„Å™„Ç≥„Éº„ÉâÊåáÊëò**: „Éï„Ç°„Ç§„É´Âêç:Ë°åÁï™Âè∑„ÇíÊòéË®ò
- **ÊîπÂñÑÊèêÊ°à**: ÂÖ∑‰ΩìÁöÑ„Å™„Ç≥„Éº„Éâ‰æã„ÇíÊèêÁ§∫
- **ÁêÜÁî±Ë™¨Êòé**: „Å™„Åú„Åù„ÅÆÂ§âÊõ¥„ÅåÂøÖË¶Å„Åã„ÇíÊòéÁ¢∫„Å´Ë™¨Êòé

### ‚úÖ **ËâØ„ÅÑÁÇπ„ÇÇË©ï‰æ°**
- ÂÑ™„Çå„ÅüÂÆüË£Ö„ÇÑÊîπÂñÑÁÇπ„ÇÇÁ©çÊ•µÁöÑ„Å´Ë©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „ÉÅ„Éº„É†„ÅÆ„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥Âêë‰∏ä„Å´ÂØÑ‰∏é„Åô„ÇãÂª∫Ë®≠ÁöÑ„Å™„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ

---

## Pull Request Diff

```diff
{diff_content}
```

---

## „É¨„Éì„É•„ÉºÁµêÊûú

‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åß„É¨„Éì„É•„Éº„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö

### üìä **Á∑èÂêàË©ï‰æ°**
- ÂÖ®‰ΩìÁöÑ„Å™ÂìÅË≥™„Çπ„Ç≥„Ç¢ (1-10)
- ‰∏ª„Å™ÊîπÂñÑÁÇπ„ÅÆË¶ÅÁ¥Ñ

### üîç **Ë©≥Á¥∞„É¨„Éì„É•„Éº**
#### „Çª„Ç≠„É•„É™„ÉÜ„Ç£ üîí
- [ÊåáÊëò‰∫ãÈ†Ö„Åå„ÅÇ„Çå„Å∞Ë®òËºâ]

#### „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ ‚ö°
- [ÊåáÊëò‰∫ãÈ†Ö„Åå„ÅÇ„Çå„Å∞Ë®òËºâ]

#### „Ç≥„Éº„ÉâÂìÅË≥™ ‚ú®
- [ÊåáÊëò‰∫ãÈ†Ö„Åå„ÅÇ„Çå„Å∞Ë®òËºâ]

#### „Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ üìã
- [ÊåáÊëò‰∫ãÈ†Ö„Åå„ÅÇ„Çå„Å∞Ë®òËºâ]

### üëç **Good Points**
- [ÂÑ™„Çå„Å¶„ÅÑ„ÇãÁÇπ„ÇíË®òËºâ]

### üöÄ **Next Actions**
- [Êé®Â•®„Åï„Çå„ÇãÊ¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥]

---

„É¨„Éì„É•„Éº„ÅØÂª∫Ë®≠ÁöÑ„ÅßÂÆüË°åÂèØËÉΩ„Å™„ÇÇ„ÅÆ„Å´„Åó„ÄÅ„ÉÅ„Éº„É†ÂÖ®‰Ωì„ÅÆ„Çπ„Ç≠„É´Âêë‰∏ä„Å´ÂØÑ‰∏é„Åô„Çã„Çà„ÅÜÂøÉ„Åå„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
"""

    def review_code(self, diff_content: str) -> Optional[str]:
        """
        Send code diff to Gemini API for review
        
        Args:
            diff_content: The git diff content to review
            
        Returns:
            AI review response or None if error occurred
        """
        if not diff_content.strip():
            logger.warning("Empty diff content provided")
            return "üìù **No code changes detected**\n\nThis pull request doesn't contain any code changes to review."
        
        prompt = self.create_review_prompt(diff_content)
        
        headers = {
            'Content-Type': 'application/json',
        }
        
        payload = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.1,  # Lower temperature for more consistent reviews
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 8192,
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }
        
        try:
            url = f"{self.base_url}?key={self.api_key}"
            logger.info(f"Sending request to Gemini API (content length: {len(diff_content)} chars)")
            
            response = requests.post(url, headers=headers, json=payload, timeout=60)
            response.raise_for_status()
            
            data = response.json()
            
            if 'candidates' in data and len(data['candidates']) > 0:
                if 'content' in data['candidates'][0]:
                    review_text = data['candidates'][0]['content']['parts'][0]['text']
                    logger.info("Successfully received AI review")
                    return review_text
                else:
                    logger.error("No content in AI response")
                    return None
            else:
                logger.error("No candidates in AI response")
                return None
                
        except requests.exceptions.Timeout:
            logger.error("Request to Gemini API timed out")
            return "‚è∞ **Review Timeout**\n\nThe AI review service is currently experiencing delays. Please try again later."
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Request error: {e}")
            return f"‚ùå **Review Service Error**\n\nThere was an error connecting to the AI review service: {str(e)}"
            
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            return "‚ùå **Response Parse Error**\n\nFailed to parse the AI review response."
            
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return f"‚ùå **Unexpected Error**\n\nAn unexpected error occurred: {str(e)}"

def post_github_comment(review_text: str, pr_number: str, repo_name: str, github_token: str) -> bool:
    """
    Post the review as a comment on the GitHub pull request
    
    Args:
        review_text: The AI review text
        pr_number: Pull request number
        repo_name: Repository name (format: owner/repo)
        github_token: GitHub API token
        
    Returns:
        True if comment was posted successfully, False otherwise
    """
    try:
        url = f"https://api.github.com/repos/{repo_name}/issues/{pr_number}/comments"
        headers = {
            'Authorization': f'token {github_token}',
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        
        # Add header and footer to the review
        formatted_review = f"""# ü§ñ AI Code Review

{review_text}

---
*ü§ñ This review was generated automatically by AI. Please use it as a reference and apply human judgment for final decisions.*

*Generated with [Google Gemini](https://ai.google.dev/) ‚Ä¢ [Claude Code](https://claude.ai/code)*
"""
        
        payload = {
            'body': formatted_review
        }
        
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        logger.info(f"Successfully posted comment to PR #{pr_number}")
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to post GitHub comment: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error posting comment: {e}")
        return False

def main():
    """Main function to orchestrate the AI review process"""
    parser = argparse.ArgumentParser(description='AI Code Review using Google Gemini')
    parser.add_argument('diff_file', help='Path to the PR diff file')
    parser.add_argument('--pr-number', help='Pull request number')
    parser.add_argument('--repo-name', help='Repository name (owner/repo)')
    parser.add_argument('--post-comment', action='store_true', 
                       help='Post review as GitHub comment')
    parser.add_argument('--output', help='Output file for review (default: stdout)')
    
    args = parser.parse_args()
    
    # Get API key from environment
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        logger.error("GEMINI_API_KEY environment variable is required")
        print("‚ùå **Configuration Error**: GEMINI_API_KEY environment variable is required")
        sys.exit(1)
    
    # Read diff file
    try:
        with open(args.diff_file, 'r', encoding='utf-8') as f:
            diff_content = f.read()
    except FileNotFoundError:
        logger.error(f"Diff file not found: {args.diff_file}")
        print(f"‚ùå **File Error**: Diff file not found: {args.diff_file}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Error reading diff file: {e}")
        print(f"‚ùå **File Error**: Failed to read diff file: {e}")
        sys.exit(1)
    
    # Perform AI review
    reviewer = GeminiReviewer(api_key)
    review_text = reviewer.review_code(diff_content)
    
    if review_text is None:
        logger.error("Failed to get AI review")
        print("‚ùå **Review Failed**: Could not generate AI review")
        sys.exit(1)
    
    # Output review
    if args.output:
        try:
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(review_text)
            logger.info(f"Review saved to {args.output}")
        except Exception as e:
            logger.error(f"Error writing output file: {e}")
            print(f"‚ùå **Output Error**: Failed to write output file: {e}")
            sys.exit(1)
    else:
        print(review_text)
    
    # Post as GitHub comment if requested
    if args.post_comment:
        github_token = os.getenv('GITHUB_TOKEN')
        pr_number = args.pr_number or os.getenv('PR_NUMBER')
        repo_name = args.repo_name or os.getenv('REPO_NAME')
        
        if not all([github_token, pr_number, repo_name]):
            logger.warning("Missing GitHub configuration for comment posting")
            print("‚ö†Ô∏è **Warning**: Missing GitHub configuration (GITHUB_TOKEN, PR_NUMBER, REPO_NAME)")
        else:
            success = post_github_comment(review_text, pr_number, repo_name, github_token)
            if not success:
                sys.exit(1)
    
    logger.info("AI review completed successfully")

if __name__ == '__main__':
    main()