name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests
      
      - name: Get PR diff
        id: get-diff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the diff between the base and head branches
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Generate the diff
          git diff $BASE_SHA..$HEAD_SHA > pr_diff.txt
          
          # Check if diff is empty
          if [ ! -s pr_diff.txt ]; then
            echo "No changes detected in the PR"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # Limit diff size to prevent API issues (max ~30KB)
            head -c 30000 pr_diff.txt > pr_diff_truncated.txt
            mv pr_diff_truncated.txt pr_diff.txt
          fi
      
      - name: Create review script
        if: steps.get-diff.outputs.has_changes == 'true'
        run: |
          cat > review.py << 'EOF'
          import os
          import sys
          import json
          import requests
          import time
          
          def get_ai_review(diff_content):
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  raise ValueError("GEMINI_API_KEY is not set")
              
              prompt = """あなたは、このプロジェクトで採用されている以下の技術スタックに精通したエキスパートレビューアです。
          - Python: uvによるパッケージ管理, Ruffによるリンティング, Blackによるフォーマット
          - JavaScript/TypeScript: Bunによるパッケージ管理, ESLint (Flat Config)によるリンティング, Prettierによるフォーマット, React
          
          これらのルールに基づき、以下のコード変更（diff形式）をレビューしてください。
          特に、以下のチェックポイントに注目し、具体的で建設的なフィードバックを日本語で提供してください。
          
          --- チェックポイント ---
          1.  **Python (`backend/`):**
              - `pyproject.toml` に定義されたRuffとBlackのルールに準拠していますか？
              - 新しい依存関係は適切に追加されていますか？
          2.  **JavaScript/TypeScript (`frontend/`):**
              - `eslint.config.js` (Flat Config) とPrettierのルールに準拠していますか？
              - Bunの利用方法（`package.json`のスクリプトなど）に問題はありませんか？
          3.  **全体:**
              - コードの品質、潜在的なバグ、パフォーマンス、セキュリティ、可読性の観点で改善点はありますか？
          
          もし問題がなければ、「指摘事項はありません。素晴らしい変更です！」と簡潔に述べてください。
          
          --- コード差分 ---
          {}""".format(diff_content)
              
              # Gemini API endpoint
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{
                      "parts": [{
                          "text": prompt
                      }]
                  }],
                  "generationConfig": {
                      "temperature": 0.7,
                      "topK": 40,
                      "topP": 0.95,
                      "maxOutputTokens": 2048,
                  }
              }
              
              try:
                  response = requests.post(url, json=payload, timeout=30)
                  response.raise_for_status()
                  
                  result = response.json()
                  if 'candidates' in result and result['candidates']:
                      content = result['candidates'][0].get('content', {})
                      parts = content.get('parts', [])
                      if parts:
                          return parts[0].get('text', 'レビュー結果を取得できませんでした。')
                  
                  return "APIからの応答が予期しない形式でした。"
                  
              except requests.exceptions.Timeout:
                  return "⏱️ APIリクエストがタイムアウトしました。後ほど再試行してください。"
              except requests.exceptions.RequestException as e:
                  return f"❌ APIリクエストエラー: {str(e)}"
              except Exception as e:
                  return f"❌ 予期しないエラー: {str(e)}"
          
          def post_pr_comment(review_text):
              github_token = os.environ.get('GITHUB_TOKEN')
              if not github_token:
                  raise ValueError("GITHUB_TOKEN is not set")
              
              # Get PR information from environment
              repo = os.environ.get('GITHUB_REPOSITORY')
              pr_number = os.environ.get('PR_NUMBER')
              
              if not repo or not pr_number:
                  raise ValueError("Repository or PR number not found")
              
              # GitHub API endpoint
              url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
              
              headers = {
                  "Authorization": f"token {github_token}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              comment_body = f"""## 🤖 AI コードレビュー結果
          
          {review_text}
          
          ---
          *このレビューは Gemini AI によって自動生成されました。*
          """
              
              payload = {"body": comment_body}
              
              response = requests.post(url, json=payload, headers=headers)
              response.raise_for_status()
              
              return response.json()
          
          def main():
              # Read the diff file
              try:
                  with open('pr_diff.txt', 'r', encoding='utf-8') as f:
                      diff_content = f.read()
              except Exception as e:
                  print(f"Error reading diff file: {e}")
                  sys.exit(1)
              
              if not diff_content.strip():
                  print("No changes to review")
                  sys.exit(0)
              
              # Get AI review
              print("Getting AI review...")
              review = get_ai_review(diff_content)
              
              # Post comment to PR
              print("Posting review comment...")
              try:
                  post_pr_comment(review)
                  print("Review posted successfully!")
              except Exception as e:
                  print(f"Error posting comment: {e}")
                  sys.exit(1)
          
          if __name__ == "__main__":
              main()
          EOF
      
      - name: Run AI review
        if: steps.get-diff.outputs.has_changes == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python review.py